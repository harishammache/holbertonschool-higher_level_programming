# 2-matrix_divided.py
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

""" divides all elements of a matrix """

Test case where div of two matrice same size
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Test case where div with negativ int of two matrice same size
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], -3)
[[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]

Test case where div is 0
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

Test case where div is not an integer and a float
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 'e')
Traceback (most recent call last):
TypeError: div must be a number

Test case where all the matrix dont have the same size
>>> matrix_divided([[1, 2, 3], [4, 5]], 2)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([[1, 2]])
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix_divided()
Traceback (most recent call last):
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Test case where all element of the lists is integers or floats
>>> matrix_divided([[1, 2, 3], [4, 5, 'e']], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

